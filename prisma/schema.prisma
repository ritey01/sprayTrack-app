generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Paddock {
  id           Int          @id @default(autoincrement())
  name         String       @db.VarChar(255)
  is_displayed Boolean      @default(true)
  companyId    Int?
  company      Company?     @relation(fields: [companyId], references: [id])
  sprayEvent   SprayEvent[]

  @@index([companyId])
}

model Crops {
  id           Int          @id @default(autoincrement())
  name         String       @db.VarChar(50)
  is_displayed Boolean      @default(true)
  companyId    Int?
  company      Company?     @relation(fields: [companyId], references: [id])
  sprayEvent   SprayEvent[]

  @@index([companyId])
}

model SprayName {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(50)
  is_displayed Boolean  @default(true)
  companyId    Int?
  sprays       Spray[]
  company      Company? @relation(fields: [companyId], references: [id])

  @@index([companyId])
}

model SprayMix {
  id           Int                  @id @default(autoincrement())
  title        String
  is_displayed Boolean              @default(true)
  companyId    Int?
  company      Company?             @relation(fields: [companyId], references: [id])
  sprays       SprayMixSpray[]
  sprayEvent   SprayMixSprayEvent[]

  @@index([companyId])
}

model Spray {
  id           Int             @id @default(autoincrement())
  rate         Float
  unit         Unit
  is_displayed Boolean         @default(true)
  sprayNameId  Int
  sprayName    SprayName       @relation(fields: [sprayNameId], references: [id])
  sprayMixes   SprayMixSpray[]

  @@index([sprayNameId])
}

model SprayMixSpray {
  id         Int      @id @default(autoincrement())
  sprayId    Int
  sprayMixId Int
  spray      Spray    @relation(fields: [sprayId], references: [id])
  sprayMix   SprayMix @relation(fields: [sprayMixId], references: [id])

  @@index([sprayId])
  @@index([sprayMixId])
}

model SprayMixSprayEvent {
  id           Int        @id @default(autoincrement())
  sprayEventId Int
  sprayMixId   Int
  sprayEvent   SprayEvent @relation(fields: [sprayEventId], references: [id])
  sprayMix     SprayMix   @relation(fields: [sprayMixId], references: [id])

  @@index([sprayEventId])
  @@index([sprayMixId])
}

model SprayEvent {
  id        Int                  @id @default(autoincrement())
  date      String
  paddockId Int
  cropId    Int
  createdBy String?
  createdAt DateTime             @default(now())
  companyId Int?
  comment   String?
  company   Company?             @relation(fields: [companyId], references: [id])
  crop      Crops                @relation(fields: [cropId], references: [id])
  paddock   Paddock              @relation(fields: [paddockId], references: [id])
  sprayMix  SprayMixSprayEvent[]
  //SprayMixId Can be null but it is linked up the above
  sprayMixId     Int?
  

  @@index([companyId])
  @@index([paddockId])
  @@index([cropId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  companyId     Int?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  refresh_token_expires_in Int?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  crops      Crops[]
  employees  Employee[]
  paddocks   Paddock[]
  SprayEvent SprayEvent[]
  sprayMixes SprayMix[]
  sprayNames SprayName[]
}

model Employee {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(100)
  email     String  @unique
  is_active Boolean @default(true)
  is_admin  Boolean @default(false)
  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  @@index([companyId])
}

model authorisedEmail {
  id    Int    @id @default(autoincrement())
  email String @unique
}

enum Unit {
  Litres
  mls
  Kgs
  grams
}
